<?php namespace ProcessWire;

class MarkupGoogleTranslate extends Process implements Module, ConfigurableModule {

    public static function getModuleinfo() {
    return [
        'title' => 'Google Page Translate',
        'summary' => 'Provides a simple interface for site visitors to translate the current page to Google supported languages. (Github fork by NewMediaConsulting for multilanguage support: https://github.com/cybermano/MarkupGoogleTranslate)',
        'author' => 'Jonathan Goodwin warp-design.co.uk & NewMediaConsulting www.newmc.it',
        'version' => 0.7,
    ];
    }

    //Utility to clean the URL to match the format Google Likes
    private function cleanUrl($url) {
        $cleanUrl = str_replace('-','--',$url);
        $cleanUrl = str_replace('.','-',$cleanUrl);
        return $cleanUrl;
    }

    public function buildGoogleTranslateUrl($languageIsoCode) {

        // User language
        (wire('user')->language->name == 'default') ? $userLang = $this->default_name : $userLang = wire('user')->language->name;
        ($userLang == '') ? $userLang = 'en' : null;

        //Get current page URL
        $currentPagePath = wire('page')->url;

        /*
        - Clean the URL to match the format Google Likes
        - But ignore home page to avoid outputting an unnecessary extra '/' later on
        */
        if ($currentPagePath != '/') {
            $currentPagePath = $this->cleanUrl($currentPagePath);
        } else {
            $currentPagePath = '';
        }

        //Get host domain
        $host = $this->cleanUrl(wire('config')->httpHost);

        
        /**
         *  It seems that Google accept only SSL cerificates (only https, not http)
         */
        //Check if we're using http/https
        $rootUrl = wire('pages')->get('/')->httpUrl;
        $scheme = (strpos($rootUrl,'https') !== false) ? 'https' : 'http' ;

        //Combine to build the translate URL
        $translateUrl = 'https://'.$host.'.translate.goog'.$currentPagePath.'?_x_tr_sch='.$scheme.'&_x_tr_sl='.$userLang.'&_x_tr_tl='.$languageIsoCode.'&_x_tr_hl='.$languageIsoCode.'&_x_tr_pto=wapp';

        return $translateUrl;

    }

    /*
    Available language codes for translation based
    on https://cloud.google.com/translate/docs/languages
    */
    private function availableLanguages() {

        return array(
            "Afrikaans" => "af",
            "Albanian" => "sq",
            "Amharic" => "am",
            "Arabic" => "ar",
            "Armenian" => "hy",
            "Azerbaijani" => "az",
            "Basque" => "eu",
            "Belarusian" => "be",
            "Bengali" => "bn",
            "Bosnian" => "bs",
            "Bulgarian" => "bg",
            "Catalan" => "ca",
            "Cebuano" => "ceb",
            "Chinese (Simplified)" => "zh-CN",
            "Chinese (Traditional)" => "zh-TW",
            "Corsican" => "co",
            "Croatian" => "hr",
            "Czech" => "cs",
            "Danish" => "da",
            "Dutch" => "nl",
            "English" => "en",
            "Esperanto" => "eo",
            "Estonian" => "et",
            "Finnish" => "fi",
            "French" => "fr",
            "Frisian" => "fy",
            "Galician" => "gl",
            "Georgian" => "ka",
            "German" => "de",
            "Greek" => "el",
            "Gujarati" => "gu",
            "Haitian Creole" => "ht",
            "Hausa" => "ha",
            "Hawaiian" => "haw",
            "Hebrew" => "he",
            "Hindi" => "hi",
            "Hmong" => "hmn",
            "Hungarian" => "hu",
            "Icelandic" => "is",
            "Igbo" => "ig",
            "Indonesian" => "id",
            "Irish" => "ga",
            "Italian" => "it",
            "Japanese" => "ja",
            "Javanese" => "jv",
            "Kannada" => "kn",
            "Kazakh" => "kk",
            "Khmer" => "km",
            "Kinyarwanda" => "rw",
            "Korean" => "ko",
            "Kurdish" => "ku",
            "Kyrgyz" => "ky",
            "Lao" => "lo",
            "Latin" => "la",
            "Latvian" => "lv",
            "Lithuanian" => "lt",
            "Luxembourgish" => "lb",
            "Macedonian" => "mk",
            "Malagasy" => "mg",
            "Malay" => "ms",
            "Malayalam" => "ml",
            "Maltese" => "mt",
            "Maori" => "mi",
            "Marathi" => "mr",
            "Mongolian" => "mn",
            "Myanmar (Burmese)" => "my",
            "Nepali" => "ne",
            "Norwegian" => "no",
            "Nyanja (Chichewa)" => "ny",
            "Odia (Oriya)" => "or",
            "Pashto" => "ps",
            "Persian" => "fa",
            "Polish" => "pl",
            "Portuguese" => "pt",
            "Punjabi" => "pa",
            "Romanian" => "ro",
            "Russian" => "ru",
            "Samoan" => "sm",
            "Scots Gaelic" => "gd",
            "Serbian" => "sr",
            "Sesotho" => "st",
            "Shona" => "sn",
            "Sindhi" => "sd",
            "Sinhala (Sinhalese)" => "si",
            "Slovak" => "sk",
            "Slovenian" => "sl",
            "Somali" => "so",
            "Spanish" => "es",
            "Sundanese" => "su",
            "Swahili" => "sw",
            "Swedish" => "sv",
            "Tagalog (Filipino)" => "tl",
            "Tajik" => "tg",
            "Tamil" => "ta",
            "Tatar" => "tt",
            "Telugu" => "te",
            "Thai" => "th",
            "Turkish" => "tr",
            "Turkmen" => "tk",
            "Ukrainian" => "uk",
            "Urdu" => "ur",
            "Uyghur" => "ug",
            "Uzbek" => "uz",
            "Vietnamese" => "vi",
            "Welsh" => "cy",
            "Xhosa" => "xh",
            "Yiddish" => "yi",
            "Yoruba" => "yo",
            "Zulu" => "zu",
        );
    }

    /*
    Return Available language flipped as code=>title
    For AsmSelect usage
    */
    private function available_flipped($k) {
        $arr = array_flip($this->availableLanguages());
        return $arr[$k];
    }

    /**
     * @param array $specific = set a two letters ISO code for single and specific language (useful in case of specific translation for single pages)
     */
    public function displayTranslateWidget(array $specific = []) {

        //Compile the available languages as select field options
        $options = '';
        // use defaults or custom argument passed
        // if no languages selected, show all
        empty($this->custom_languages) ? $custom_languages = $this->availableLanguages() : $custom_languages = $this->custom_languages;
        if (!empty($specific)) $custom_languages = $specific;
        // build select options
        foreach ($custom_languages as $code) {
            $url = $this->buildGoogleTranslateUrl($code);
            // workaround with flipped array
            $options .= '<option value="'.$url.'">'.$this->available_flipped($code).'</option>';
        }

        ($this->icon != 0) ? $icon = '<img class="" src="https://fonts.gstatic.com/s/i/productlogos/translate/v6/'.$this->icon_size.'px.svg" alt="Google Translate">' : $icon = '';

        $out = '';
        //Compile and output
        if ($this->wrapper) $out .= '<div class="'.$this->div_classes.'">';
        // Place icon on left
        if ($this->icon == 1) $out .= $icon;
        // Build Select
        $out .= '<select class="'.$this->select_classes.'" onchange="location = this.options[this.selectedIndex].value;">';
        // set first option label override
        ($this->first_option == '') ? $label = 'Translate page' : $label = $this->first_option;
        $out .= '<option>'.$label.'</option>';
        $out .= $options;
        $out .= '</select>';
        // Place icon on right
        if ($this->icon == 2) $out .= $icon;
        if ($this->wrapper) $out .= '</div>';

        return $out;
    }

    public static function getModuleConfigInputfields(array $data)
    {

        $availableLanguages = array_flip(wire('modules')->get('MarkupGoogleTranslate')->availableLanguages());

        $wrap = new InputfieldWrapper();

        // default pw language name to pass as starting language
        $f = wire('modules')->get('InputfieldText');
        $f->name = 'default_name';
        $f->icon = 'flag-checkered';
        $f->columnWidth = 25;
        $f->minlength = $f->maxlength = 2;
        $f->size = 1;
        $f->label = 'Name code as starting language';
        $f->description = 'ISO 639-1 code (two letters) to pass the "default" processwire language to Google Translation url as source language to start translating from';
        $f->notes = 'If blank, ProcessWire "default" language name will be passed as "en"';
        $f->value = (isset($data['default_name'])) ? $data['default_name'] : 'en';
        $wrap->add($f);

        // default pw language name to pass as starting language
        $f = wire('modules')->get('InputfieldText');
        $f->name = 'first_option';
        $f->icon = 'font';
        $f->columnWidth = 25;
        $f->label = 'First option label for the html select tag';
        $f->description = 'Avoids specific multi language translation for this label
        
        ';
        $f->notes = 'If blank, will be populated as "Translate page"';
        $f->value = (isset($data['first_option'])) ? $data['first_option'] : '';
        $wrap->add($f);

        // custom AsmSelect for available languages
        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->name = 'custom_languages';    
        $f->icon = 'language';
        $f->columnWidth = 50;
        $f->label = 'Languages to display into select options';
        $f->description = 'Select one or more languages to show in drop-down select options list';
        $f->notes = 'If blank, all available languages are populated as select options
        
        Into template page, it could be overrided by passing an array of ISO codes eg.:
        ```echo wire("modules")->get("MarkupGoogleTranslate")->displayTranslateWidget(["es","fr"]);```';
        foreach ($availableLanguages as $code => $title){
            $f->addOption($code,$title);
        }       
        if(isset($data['custom_languages'])) $f->value = $data['custom_languages'];
        $wrap->add($f);

        // Google Translation product icon
		$f = wire('modules')->get('InputfieldRadios'); 
		$f->name = 'icon'; 
		$f->icon = 'google'; 
		$f->label = 'Show Google Translate product icon'; 
		$f->addOption(0,'No, do not show icon'); 
		$f->addOption(1, 'Yes, place on the LEFT'); 
		$f->addOption(2, 'Yes, place on the RIGHT'); 
		$f->attr('value', 0); 
        if(isset($data['icon'])) $f->value = $data['icon'];        
		$f->optionColumns = 1; 
		$f->columnWidth = 50; 
		$wrap->add($f);   
        
        // Icon size
		$f = wire('modules')->get('InputfieldRadios'); 
		$f->name = 'icon_size'; 
		$f->icon = 'arrows-alt'; 
		$f->label = 'Size of the icon'; 
		$f->addOption(16,'Small, 16px'); 
		$f->addOption(24,'Normal, 24px'); 
		$f->addOption(32,'Big, 32px'); 
		$f->addOption(40,'Huge, 40px'); 
		$f->attr('value', 24); 
        if(isset($data['icon_size'])) $f->value = $data['icon_size'];        
		$f->optionColumns = 1; 
		$f->columnWidth = 50; 
        $f->showIf = 'icon!=0';
		$wrap->add($f);          

        // DIV wrapper
        $f = wire('modules')->get('InputfieldCheckbox'); 
		$f->name = 'wrapper'; 
		$f->icon = 'code'; 
		$f->label = 'Wrap all into a div';
		$f->label2 = 'Yes';
		$f->checked($data['wrapper']) ;
		$f->columnWidth = 50;
		$f->description = 'Wrap both select and icon (if enabled) into a single div';
		$wrap->add($f);    

        // DIV classes
        $f = wire('modules')->get('InputfieldText'); 
		$f->name = 'div_classes'; 
		$f->icon = 'file-code-o'; 
		$f->label = 'Optional classes for DIV styling';
		$f->description = 'Write classes as html attribute (without quotes, nor dots)';
		$f->notes = 'Eg. d-flex justify-content-between';
        if(isset($data['div_classes'])) $f->value = $data['div_classes'];        
		$f->columnWidth = 50;
        $f->showIf = 'wrapper=1';
		$wrap->add($f);

        // SELECT classes
        $f = wire('modules')->get('InputfieldText'); 
		$f->name = 'select_classes'; 
		$f->icon = 'mouse-pointer'; 
		$f->label = 'Optional classes for SELECT styling';
		$f->description = 'Write classes as html attribute (without quotes, nor dots)';
		$f->notes = 'Eg. according to bootstrap framework: form-control form-control-sm';
        if(isset($data['select_classes'])) $f->value = $data['select_classes'];        
		$f->columnWidth = 100;
		$wrap->add($f);          


        return $wrap;
    }

}